worker_processes  4;
worker_priority -10;
worker_rlimit_nofile 102400;
error_log  /usr/local/nginx/logs/error.log debug;
pid        /usr/local/nginx/logs/nginx.pid;

events {
    use epoll;
    worker_connections  102400;
}

#
#dso {
#    load ngx_http_fastcgi_module.so;
#    load ngx_http_rewrite_module.so;
#}

http {
    server_tokens                   off;
    include       mime.types;

	proxy_redirect                off;
  proxy_set_header              Host $host;
  proxy_set_header              X-Real-IP $remote_addr;
  proxy_set_header              X-Forwarded-For $proxy_add_x_forwarded_for;
  client_max_body_size          200m;
  client_body_buffer_size       256k;
  proxy_connect_timeout         600;
  proxy_send_timeout            600;
  proxy_read_timeout            600;
  proxy_buffer_size             256k;
  proxy_buffers                 16 128k;
  proxy_busy_buffers_size       256k;
  proxy_temp_file_write_size    256k;

    default_type  application/octet-stream;
    charset  utf8;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 512k;
    large_client_header_buffers 8 64k;
 client_body_temp_path           /var/tmp/client_body_temp 1 2;
  proxy_temp_path                 /var/tmp/proxy_temp 1 2;
  fastcgi_temp_path               /var/tmp/fastcgi_temp 1 2;
  uwsgi_temp_path                 /var/tmp/uwsgi_temp 1 2;
  scgi_temp_path                  /var/tmp/scgi_temp 1 2;

    ignore_invalid_headers          on;
  server_names_hash_max_size      256;
  connection_pool_size            256;
  request_pool_size               64k;

  output_buffers                  2 128k;
  postpone_output                 1460;

  client_header_timeout           1m;
  client_body_timeout             3m;
  send_timeout                    3m;
    sendfile        on;
    tcp_nopush     on;
    tcp_nodelay                     on;
    # 设置通过"一个存活长连接"送达的最大请求数（默认是100，建议根据客户端在"keepalive"存活时间内的总请求数来设置）
    #     # 当送达的请求数超过该值后，该连接就会被关闭。（通过设置为5，验证确实是这样）
  #  keepalive_requests 81920;
    
    keepalive_timeout  300s 300s;
    reset_timedout_connection       on;
  #  keepalive_timeout               10 5;
    keepalive_requests              100;

   # fastcgi_connect_timeout 300;
   # fastcgi_send_timeout 300;
   # fastcgi_read_timeout 300;
   # fastcgi_buffer_size 512k;
   # fastcgi_buffers 8 128k;
   # fastcgi_busy_buffers_size 512k;
   # fastcgi_temp_file_write_size 512k;

    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
    gzip_disable msie6;
    #limit_zone  crawler  $binary_remote_addr  10m;
    log_format '$remote_addr - $remote_user [$time_local] "$request" '                              
               '$status $body_bytes_sent "$http_referer" '
               '"$http_user_agent" "$http_x_forwarded_for"';
 
    include /usr/local/nginx/conf.d/*.conf;
    proxy_cache_path /data/cache/tmp levels=1:2 keys_zone=imgcache:100m inactive=1d max_size=10g;
       
    
  upstream chegou.com {

        server 247.152.182.86:80  weight=100;
        server 247.175.159.110:80  weight=5;
        server 147.175.159.118:80 weight=20;
         check interval=30000 rise=2 fall=5 timeout=2000 default_down=false type=http;
     #   check_http_send "HEAD / HTTP/1.0\r\n\r\n";
         check_http_send "HEAD / HTTP/1.1\r\nConnection: keep-alive\r\nHost: chegou.com\r\n\r\n"; 
         check_http_expect_alive http_2xx http_3xx;
         keepalive 256;
         keepalive_timeout 300s;
         check_keepalive_requests 10000;

    }


server {
        listen       80;
        server_name *.chegou.com 12.127.213.220;
           location ~ \.(aspx|asp|jsp|jspx|do)?$ {
            deny all;
            #return       403;
            }
            if ( $request_uri ~* name=[a-zA-z]+://)
          {
          return       403;
          }
 
          location / {
            index index.php;
            proxy_pass http://chegouguanjian.com;   #来自jsp请求交给tomcat处理
            proxy_redirect off;
            proxy_set_header Host $host;    #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            client_max_body_size 512m;   #允许客户端请求的最大单文件字节数
            client_body_buffer_size 1024k; #缓冲区代理缓冲用户端请求的最大字节数
            proxy_connect_timeout 300;   #nginx跟后端服务器连接超时时间(代理连接超时)
            proxy_read_timeout 300;      #连接成功后，后端服务器响应时间(代理接收超时)
            proxy_buffer_size 512k;       #设置代理服务器（nginx）保存用户头信息的缓冲区大小
            proxy_buffers 8 128k;        #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置
            proxy_busy_buffers_size 512k;#高负荷下缓冲大小（proxy_buffers*2）
            proxy_temp_file_write_size 512k; #设定缓存文件夹大小，大于这个值，将从upstream服务器传
            proxy_http_version 1.1;# 使用keepalive连接的话，建议使用1.1版本
            proxy_set_header Connection "";    # 允许重新定义或追加字段到传递给代理服务器的请求头信息
            proxy_next_upstream http_502;
        } 
  location ~ \.(css|js|ico|gif|jpg|png|flv|swf)(.*) {  
	     proxy_pass http://chegou.com;         #如果没有缓存则通过proxy_pass转向请求
	     proxy_redirect off;  
             proxy_set_header Host $host;
             proxy_cache imgcache;  
             proxy_cache_valid 200 302 1h;                              #对不同的HTTP状态码设置不同的缓存时间,h小时,d天数  
             proxy_cache_valid 301 1d;  
             proxy_cache_valid any 1m;
             proxy_http_version 1.1;# 使用keepalive连接的话，建议使用1.1版本
             proxy_set_header Connection "";    # 允许重新定义或追加字段到传递给代理服务器的请求头信息
  
             expires 30d;
             proxy_next_upstream http_404 http_502;  
       }
  
  location /status {
         check_status;
         access_log off;
         #allow IP;
         #deny all;
       }

   error_page   500 502 503 504 404 403 /50x.html;
        location = /50x.html {
            root   html;
        }


include agent_deny.conf;

 


    }
server {
    listen       80  default_server;
    server_name  _;
    return       403;
   error_page   500 502 503 504 404 403 /50x.html;
        location = /50x.html {
            root   html;
        }

}

}
