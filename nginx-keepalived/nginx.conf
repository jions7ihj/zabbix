
#user  nobody;
worker_processes    4;

worker_cpu_affinity 0001 0010 0100 1000 ;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;
worker_rlimit_nofile 204800;

google_perftools_profiles /tmp/tcmalloc;

events {
    use epoll;
    worker_connections  204800;
}


http {
    sendfile        on;
    server_tokens                   off;
    include       mime.types;
    proxy_redirect                off;
    proxy_set_header              Host $host;
    proxy_set_header              X-Real-IP $remote_addr;
    proxy_set_header              X-Forwarded-For $proxy_add_x_forwarded_for;
    client_max_body_size          20m;
    client_body_buffer_size       256k;
    proxy_connect_timeout         90;
    proxy_send_timeout            90;
    proxy_read_timeout            90;
    proxy_buffer_size             128k;
    proxy_buffers                 4 64k;
    proxy_busy_buffers_size       128k;
    proxy_temp_file_write_size    128k;

    default_type  application/octet-stream;
    charset  utf8;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 512k;
    large_client_header_buffers 8 64k;
    client_body_temp_path           /var/tmp/client_body_temp 1 2;
    proxy_temp_path                 /var/tmp/proxy_temp 1 2;
    fastcgi_temp_path               /var/tmp/fastcgi_temp 1 2;
    uwsgi_temp_path                 /var/tmp/uwsgi_temp 1 2;
    scgi_temp_path                  /var/tmp/scgi_temp 1 2;

    ignore_invalid_headers          on;
    server_names_hash_max_size      256;
    connection_pool_size            256;
    request_pool_size               64k;

    output_buffers                  2 128k;
    postpone_output                 1460;

    client_header_timeout           1m;
    client_body_timeout             3m;
    send_timeout                    3m;
    tcp_nopush     on;
    tcp_nodelay                     on;
    # 设置通过"一个存活长连接"送达的最大请求数（默认是100，建议根据客户端在"keepalive"存活时间内的总请求数来设置）
    #     # 当送达的请求数超过该值后，该连接就会被关闭。（通过设置为5，验证确实是这样）
    #  keepalive_requests 81920;
    
    keepalive_timeout  300s 300s;
    reset_timedout_connection       on;
    #  keepalive_timeout               10 5;
    keepalive_requests              100;

    fastcgi_connect_timeout 300;
    fastcgi_send_timeout 300;
    fastcgi_read_timeout 300;
    fastcgi_buffer_size 512k;
    fastcgi_buffers 8 128k;
    fastcgi_busy_buffers_size 512k;
    fastcgi_temp_file_write_size 512k;

    gzip on;
    gzip_min_length  1k;
    gzip_buffers     4 16k;
    gzip_http_version 1.0;
    gzip_comp_level 2;
    gzip_types       text/plain application/x-javascript text/css application/xml;
    gzip_vary on;
    gzip_disable msie6;
    #limit_zone  crawler  $binary_remote_addr  10m;
    log_format '$remote_addr - $remote_user [$time_local] "$request" '                              
               '$status $body_bytes_sent "$http_referer" '
               '"$http_user_agent" "$http_x_forwarded_for"';
     upstream account {
        server 192.168.1.201:9100 weight=10;
        server 192.168.1.202:9100 weight=10;
        server 192.168.1.203:9100 weight=10;
        server 192.168.1.204:9100 weight=10;
    }

    upstream business {
        server 192.168.1.201:9200 weight=10;
        server 192.168.1.202:9200 weight=10;
        server 192.168.1.203:9200 weight=10;
        server 192.168.1.204:9200 weight=10;
    }

    upstream im {
        server 192.168.1.201:9300 weight=10;
        server 192.168.1.201:9300 weight=10;
        server 192.168.1.201:9300 weight=10;
        server 192.168.1.201:9300 weight=10;
    }

    upstream manger{
        server 192.168.1.201:9400 weight=10;
        server 192.168.1.202:9400 weight=10;
        server 192.168.1.203:9400 weight=10;
        server 192.168.1.204:9400 weight=10;
    }
     

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }
        location /status

         {

          stub_status on;
   
          }
         

         
        location /act/ {
            proxy_pass http://account/;
            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /biz/ {
            proxy_pass http://business/;
            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /im/ {
            proxy_pass http://im/;
            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /mgr/ {
            proxy_pass http://manger/;
            proxy_set_header Host $host;

            proxy_set_header X-Real-IP $remote_addr;

            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }


        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
